 <?php
require_once 'JsGenerator.php';
require_once 'StyleSettings.php';

 /**
  * the class for generating JavaScript for the about us
  * the generated js will be used for building the about us page
  * Class AboutJsGenerator
  */
class AboutJsGenerator implements JsGenerator
{

    private $jsString;
    private $aboutData;
    private $canvasClass;
    private $lang;
    private $callbackFunctionName;
    private $dir;
    private $rtlLangs = ['he'];
    private $styleSettings;

    public function __construct(string $aboutData = '', string $canvasClass = 'bmby-about', string $callbackFunctionName = '', string $lang = 'en', StyleSettings $styleSettings)
    {
        $this->jsString = '';
        $this->aboutData = !empty($aboutData) ? $aboutData : "[]";
        $this->canvasClass = $canvasClass;
        $this->lang = $lang;
        $this->callbackFunctionName = empty($callbackFunctionName) ? 'nonExistentFunction' : $callbackFunctionName;
        $this->dir = (in_array($lang, $this->rtlLangs))?'rtl':'ltr';
        $this->styleSettings = $styleSettings;
        $this->setJs();
    }

    /**
     * this method is used to output javascript from php file
     * and it can be added in the html page like a regular javascript file
     */
    public function showJs()
    {
        header('Content-Type: application/javascript');
        echo $this->jsString;
    }

    /**
     * this method generates javascript string and save it to the class property so we can use it
     * and insert into the js string necessary javascript variables which are are generated by php
     */
    private function setJs()
    {
        $bg = $this->styleSettings->bg;
        $btn_fg = $this->styleSettings->btn_fg;
        $this->jsString = <<<EOD
let aboutUsData = $this->aboutData;
let canvasClass = '$this->canvasClass';
let lang = '$this->lang';
let dir = '$this->dir';
 
let hasUbuntuFont = false;
let aboutUsSections = [];

let mode = 'prod';
let aboutUsMainContainer;
let activeTabInd = aboutUsData[0].order;;
try{
    $this->callbackFunctionName();
} catch (e) {
    if (mode === 'dev') {
        console.log('unable to run callback');
    }
}

// add about us on document load
window.addEventListener("DOMContentLoaded", function (event) {
    aboutUsMainContainer = document.querySelector('.' + canvasClass);
    aboutUsMainContainer.classList.add(dir);
    addFont();
    addBasicStyle();
    const userAgent = checkUserAgent();
        if (userAgent && userAgent !== 'Windows'){
            reduceImage();
        }
    insertMenu(aboutUsData[0].order);
    orientationHandler();
});

window.addEventListener('orientationchange', orientationHandler);
window.addEventListener('load',cropImageToText);

function cropImageToText() {
    if (window.innerWidth >= 1024){
        const sectionCollection = document.querySelectorAll('.tab-content__container-section');
        sectionCollection.forEach(section => {
            setTimeout(() => {
                const img = section.querySelector('.about-us__img-container > .tab-content__image');
                const sub = section.querySelector('.text-content__wrapper > .about-us__sub-wrapper');
                let subHeight = 0;
                for (let child of sub.children) {
                    subHeight += child.getBoundingClientRect().height;
                }
                if (img.getBoundingClientRect().height > subHeight + 120) {
                    img.style.height = subHeight + 120 + 'px';
                }
            }, 50);
        });
    }
}

function checkUserAgent () {
    let userAgentData;
    const userAgentArr = ['iPhone','iPad','Android','Windows'];
    const userAgent = window.navigator.userAgent;
    userAgentArr.forEach(agent =>{
        const res = userAgent.match(agent);
        if (res){
            userAgentData = res[0];
        }
    });
    return userAgentData;
}

function orientationHandler() {
   setTimeout(()=>{
           const isPortrait = isWindowInPortrait();
           if (window.innerWidth < 1024) {
               clearContent();
               insertMenu(activeTabInd);

               if (aboutUsData.length > 1){
                   const contentWrapper = document.querySelector('.tabs-data-content__wrapper');
                   if (!isPortrait && dir === 'ltr') {
                       contentWrapper.style.marginLeft = 114 + 'px';
                   } else if (!isPortrait && dir === 'rtl') {
                       contentWrapper.style.marginRight = 114 + 'px';
                   } else {
                       contentWrapper.style.marginRight = 0 + 'px';
                       contentWrapper.style.marginLeft = 0 + 'px';
                   }
               }
           } else {
               clearContent();
               insertMenu(activeTabInd);
           }
       }, 250);
}

function clearContent() {
    while (aboutUsMainContainer.firstChild) {
        aboutUsMainContainer.removeChild(aboutUsMainContainer.firstChild);
    }
}

function creatHtmlElement(parent, elementName, elementTag, elementClass) {
    const el = document.createElement(elementTag);
    if (Array.isArray(elementClass)) {
        elementClass.forEach(classElement => {
            el.classList.add(classElement);
        });
    } else {
        el.style.cssText = elementClass;
    }
    el.innerHTML = elementName;
    if (parent) {
        parent.appendChild(el);
    }
    return el;
}

function addFont() {
    document.head.innerHTML += '<link href="https://fonts.googleapis.com/css2?family=Ubuntu:wght@300;500&display=swap" rel="stylesheet">';
    document.head.innerHTML += '<link href="https://fonts.googleapis.com/css2?family=Assistant:wght@600&family=Ubuntu:wght@300&display=swap" rel="stylesheet">';
}

function addBasicStyle() {
    const replacedStyle = basicStyle.replace(/main-container-about/g, canvasClass);
    document.head.innerHTML += '<style>' + replacedStyle + '</style>';
    const userAgent = checkUserAgent();
    if (userAgent !== 'iPad' && window.innerWidth >= 1024){
        const desktopReplaced = desktopStyle.replace(/main-container-about/g, canvasClass);
        document.head.innerHTML +='<style>'+desktopReplaced+'</style>';
    }
}

function reduceImage () {
    const reduceImgUrl = 'cdn-cgi/image/width=800';
    aboutUsData.forEach(data=>{
       data.sections.forEach(section =>{
           if (section.imageUrl.length>0){
               const parseUrl = section.imageUrl.replace('https://','').split('/');
               parseUrl.unshift('https:/');
               parseUrl.splice(2,0,reduceImgUrl);
               const buildUrl = parseUrl.join('/');
               section.imageUrl = buildUrl;
           }
       });
    });
}

function insertMenu(activeTab = 0) {
    let tabsDataMainContainer;
    let menuWrapper;
    let menuContainer;


    if (window.innerWidth >=1024){
        menuWrapper = creatHtmlElement('','','div',['menu-content__wrapper']);
        menuContainer = creatHtmlElement(menuWrapper, '', 'ul', ['menu__items']);
        aboutUsMainContainer.insertAdjacentElement('afterbegin', menuWrapper);
    }else{
        menuContainer = creatHtmlElement('', '', 'ul', ['menu__items']);
        aboutUsMainContainer.insertAdjacentElement('afterbegin', menuContainer);
    }


    const isTabWrapperExist = aboutUsMainContainer.querySelector('.tabs-data-content__wrapper');
    if (!isTabWrapperExist) {
        tabsDataMainContainer = creatHtmlElement(aboutUsMainContainer, '', 'div', ['tabs-data-content__wrapper']);
    } else {
        tabsDataMainContainer = isTabWrapperExist;
    }
    aboutUsData.forEach((menuElement, index) => {
        if (aboutUsData.length > 1){
            let chapter = menuElement.chapter.filter(el => el.lang === lang);
            if (!chapter[0].hasOwnProperty('value')) {
                throw 'menuElement has unsupported structure';
            }
            const li = creatHtmlElement(menuContainer, chapter[0].value, 'li', ['menu__item']);
            li.dataset.order = menuElement.order;
        }
        buildTabsContent(tabsDataMainContainer, menuElement);
    });
    const menuElementOrder = document.querySelector('.menu__item[data-order="' + activeTab + '"]');
    switchTab(menuElementOrder);
    activeTabInd = activeTab;

    creatHtmlElement(menuContainer, '', 'div', ['menu__plug']);
    setMenuStyle(menuContainer);
    menuContainer.addEventListener('click', (e) => switchTab(e.target));
    tabsDataMainContainer.addEventListener('swiped', swipeTabsContent);
}

function swipeTabsContent(e) {
    if (aboutUsData.length > 1){
        const isPortrait = isWindowInPortrait();

        if (isPortrait) {
            const activeMenu = getActiveTabMenu();
            const swipeDirection = e.detail.dir;

            switch (swipeDirection) {
                case dir === 'rtl' ? 'right' : 'left':
                    const nexElement = activeMenu.parentElement.querySelector('.menu__item[data-order="' + (Number(activeMenu.dataset.order) + 1) + '"]');
                    if (nexElement) {
                        switchTab(nexElement);
                    }
                    break;
                case dir === 'rtl' ? 'left' : 'right':
                    const prevElement = activeMenu.parentElement.querySelector('.menu__item[data-order="' + (Number(activeMenu.dataset.order) - 1) + '"]');
                    if (prevElement) {
                        switchTab(prevElement);
                    }
                    break;
            }
        }
    }
}

function getActiveTabMenu() {
    let activeMenu;
    const menuCollection = document.querySelectorAll('.menu__item');
    menuCollection.forEach(menu => {
        if (menu.classList.contains('active')) {
            activeMenu = menu;
        }
    });
    return activeMenu;
}

function isWindowInPortrait() {
    return window.matchMedia("(orientation: portrait)").matches;
}

function setMenuStyle(menuItems) {
    const isPortrait = isWindowInPortrait();
    const childrenItems = menuItems.children;
    const lengthItems = menuItems.children.length;
    const scrollWidth = menuItems.scrollWidth;
    const currentView = menuItems.offsetWidth;

    if (isPortrait) {
        if (scrollWidth <= currentView && lengthItems > 2) {
            menuItems.style.justifyContent = 'space-between';
            for (let child of childrenItems) {
                child.style.flexBasis = 100 / (lengthItems - 1) + '%';
                child.style.textAlign = 'center';
            }
        }
    }
}

function buildTabsContent(container, objectContent) {
    let title;
    let text;
    let textWrapper;
    const tab = creatHtmlElement(container, '', 'div', ['tab-content__container']);
    objectContent.sections.forEach(sectionData => {
        // this is the DOM element that contains the section content
        let section = creatHtmlElement(tab, '', 'div', ['tab-content__container-section']);
        tab.dataset.order = objectContent.order;

        if (window.innerWidth >= 1024){

            textWrapper = creatHtmlElement(section,'','div',['text-content__wrapper']);
            const subWrapper = creatHtmlElement(textWrapper,'','div',['about-us__sub-wrapper']);
            if (sectionData.title.filter(el => el.lang === lang)[0].value.length > 0){
                title = creatHtmlElement(subWrapper, sectionData.title.filter(el => el.lang === lang)[0].value, 'h3', ['tab-content__title']);
            }

            text = creatHtmlElement(subWrapper, sectionData.description.filter(el => el.lang === lang)[0].value, 'p', ['tab-content__text']);
        } else {
            if (sectionData.title.filter(el => el.lang === lang)[0].value.length > 0){
                title = creatHtmlElement(section, sectionData.title.filter(el => el.lang === lang)[0].value, 'h3', ['tab-content__title']);
            }

            text = creatHtmlElement(section, sectionData.description.filter(el => el.lang === lang)[0].value, 'p', ['tab-content__text']);
        }

        const imgContainer = creatHtmlElement(section, '', 'div', ['about-us__img-container']);
        const img = creatHtmlElement(imgContainer, '', 'img', ['tab-content__image']);
        img.src = sectionData.imageUrl;

        if (objectContent.order !== 0) {
            if (aboutUsData.length > 1){
                tab.classList.add('hide-tab');
            }
        }
    });
}

function toggleTabContent(tabOrder) {
    const tabsContentCollection = document.querySelectorAll('.tab-content__container');
    tabsContentCollection.forEach(tab => {
        if (tab.dataset.order === tabOrder) {
            tab.classList.remove('hide-tab');
        } else {
            tab.classList.add('hide-tab');
        }
    });

}

function switchTab(e) {
    if(e === null){
        return;
    }
    const parent = e.parentElement;
    if (e.classList.contains('menu__item')) {
        setActiveTab(parent, e);
        activeTabInd = e.dataset.order;
        toggleTabContent(e.dataset.order);
        cropImageToText();
    }
}

function setActiveTab(parent, e) {
    const menuItemsCollection = parent.querySelectorAll('.menu__item');
    menuItemsCollection.forEach(menu => {
        if (e === menu) {
            menu.classList.add('active');
        } else {
            menu.classList.remove('active');
        }
    });
}


const basicStyle = `
:root {
--bg-color: $bg;
}

body{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.main-container-about p, h3{
    margin: 0;
}

.main-container-about {
  font-family: 'Assistant', sans-serif;
  font-size: 18px;
  color: #FFFFFF;
  font-weight: 600;
  position: relative;
  background: var(--bg-color);
}

.menu__items {
  list-style: none;
  display: flex;
  padding: 0;
  overflow-x: scroll;
  margin: 0;
  -ms-overflow-style: none;
  scrollbar-width: none;
}
.menu__items::-webkit-scrollbar {
  display: none;
}

.menu__item {
  text-align: center;
  padding: 11px 0;
  margin: 0 12px;
  white-space: nowrap;
  font-size: 16px;
}

.menu__plug {
  content: '';
  min-width: 1px;
  max-width: 1px;
}

.active {
  border-bottom: 3px solid $btn_fg;
  color: $btn_fg;
}

.hide-tab{
 display: none;
}

.about-us__img-container{
 padding: 0 16px;
 padding-bottom: 16px;
}

.tab-content__image{
  width: 100%;
}

  .tabs-data-content__wrapper::before{
    content:'';
    display: block;
    width: 100%;
    height: 100vh;
    position: fixed;
    z-index: -1;
    top:0;
    left:0;
    background: var(--bg-color);
}

.tab-content__title{
  font-size: 18px;
  color: #fff;
  margin: 24px 16px 12px 16px;
}

.tab-content__text{
  font-size: 14px;
  font-weight: 300;
  line-height: 16px;
  color: #fff;
  padding: 0 16px 24px 16px;
}

.rtl {
  text-align: right;
  direction: rtl;
}

.ltr{
  text-align: left;
  direction: ltr;
}

@media (orientation: landscape) {

.menu__items {
    display: block;
    flex-basis: 40%;
    position: fixed;
    width: 114px;
    top: 0;
}

.menu__item{
    margin-bottom: 19px;
    text-overflow: ellipsis;
    overflow: hidden;
}

.tab-content__title{
    margin: 0 16px 12px 16px;
    padding-top: 12px;
}
}

.content__wrapper{
  width: 100%;
  max-width: 1280px;
  margin: 0 auto;
}

.about-us__section {
  display: flex;
  justify-content: space-between;
  padding: 80px 10px 0 10px;
}

.about-us__section:nth-of-type(even){
  flex-direction: row-reverse;
}

.about-us__image{
  width: 100%;
  object-fit: cover;
}

.about-us__sub-wrapper, .about-us__img-container{
  flex-basis: 47%;
}

.about-us__section-title{
  font-size: 30px;
  margin-bottom: 48px;
}

@media screen and (min-width: 1024px) {
  .main-container-about {
    padding: 0 10px;
    background: linear-gradient(180deg, #2A3549 0%, #131A2D 100%);
    color: #fff;
    font-family: 'Assistant', sans-serif;
    font-style: normal;
  }
  .menu__items{
    display: flex;
    // border-bottom: 1px solid #C0C0C0;
    flex-basis: 40%;
    position: inherit;
    width: 100%;
    top: 0;
    color: #fff;
  }
  .menu-content__wrapper::after{
    content: '';
    width: 100%;
    display:block;
    height: 1px;
    margin-top: -2px;
    background: #fff ;
  }

  .active {
    border-bottom: 3px solid #603EF2;
    color: #603EF2;
    }
   .tabs-data-content__wrapper, .menu-content__wrapper{
    max-width: 1280px;
    width: 100%;
    margin: 0 auto;
  }

  .tabs-data-content__wrapper::before{
    background: linear-gradient(180deg, #2A3549 0%, #131A2D 10%);
}
  .menu__item{
    margin: 0;
    padding: 11px 49px;
    font-size: 30px;
    font-style: normal;
    font-weight: 500;
    cursor: pointer;
  }
   .tab-content__title{
    margin: 0;
    padding-top: 0;
  }
   .tab-content__text{
    padding: 0;
  }
  .tab-content__image{
    object-fit: cover;
  }
  .about-us__img-container{
    padding: 0;
  }
  .tab-content__container-section{
    display: flex;
    justify-content: space-between;
    margin-top: 80px;
  }
  .tab-content__container-section:nth-child(odd){
    flex-direction: row-reverse;
  }
   .tab-content__title{
    color: #fff;
    font-size: 30px;
    font-weight: 500;
  }
  .tab-content__text{
    color: #fff;
    font-weight: 300;
    font-size: 16px;
    padding-top: 48px;
    line-height: 18px;
    letter-spacing: -0.21px;
  }
   .text-content__wrapper{
    flex-basis: 47%;
  }

}

`;

const desktopStyle = `
@media screen and (min-width: 1024px) {
  .main-container-about {
    padding: 0 10px;
    background: #F7F7F7;
    font-family: 'Ubuntu', sans-serif;
    font-style: normal;
  }
  .menu__items{
    display: flex;
    // border-bottom: 1px solid #C0C0C0;
    flex-basis: 40%;
    position: inherit;
    width: 100%;
    top: 0;
    color: #C0C0C0;
  }
  .menu-content__wrapper::after{
    content: '';
    width: 100%;
    display:block;
    height: 1px;
    margin-top: -2px;
    background: #C0C0C0 ;
  }

  .active {
    border-bottom: 3px solid #1A2F43;
    color: #1A2F43;
    }
   .tabs-data-content__wrapper, .menu-content__wrapper{
    max-width: 1280px;
    width: 100%;
    margin: 0 auto;
  }

  .tabs-data-content__wrapper::before{
    background: #F7F7F7;
}
  .menu__item{
    margin: 0;
    padding: 11px 49px;
    font-size: 30px;
    font-style: normal;
    font-weight: 500;
    cursor: pointer;
  }
   .tab-content__title{
    margin: 0;
    padding-top: 0;
  }
   .tab-content__text{
    padding: 0;
  }
  .tab-content__image{
    object-fit: cover;
  }
  .about-us__img-container{
    padding: 0;
  }
  .tab-content__container-section{
    display: flex;
    justify-content: space-between;
    margin-top: 80px;
  }
  .tab-content__container-section:nth-child(odd){
    flex-direction: row-reverse;
  }
   .tab-content__title{
    color: #1A2F43;
    font-size: 30px;
    font-weight: 500;
  }
  .tab-content__text{
    color: #03233A;
    font-weight: 300;
    font-size: 16px;
    padding-top: 48px;
    line-height: 18px;
    letter-spacing: -0.21px;
  }
   .text-content__wrapper{
    flex-basis: 47%;
  }

}
`;

/*!
 * swiped-events.js - v@version@
 * Pure JavaScript swipe events
 * https://github.com/john-doherty/swiped-events
 * @inspiration https://stackoverflow.com/questions/16348031/disable-scrolling-when-touch-moving-certain-element
 * @author John Doherty <www.johndoherty.info>
 * @license MIT
 */
(function (window, document) {

    'use strict';

    // patch CustomEvent to allow constructor creation (IE/Chrome)
    if (typeof window.CustomEvent !== 'function') {

        window.CustomEvent = function (event, params) {

            params = params || {bubbles: false, cancelable: false, detail: undefined};

            var evt = document.createEvent('CustomEvent');
            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
            return evt;
        };

        window.CustomEvent.prototype = window.Event.prototype;
    }

    document.addEventListener('touchstart', handleTouchStart, false);
    document.addEventListener('touchmove', handleTouchMove, false);
    document.addEventListener('touchend', handleTouchEnd, false);

    var xDown = null;
    var yDown = null;
    var xDiff = null;
    var yDiff = null;
    var timeDown = null;
    var startEl = null;

    /**
     * Fires swiped event if swipe detected on touchend
     * @param {object} e - browser event object
     * @returns {void}
     */
    function handleTouchEnd(e) {

        // if the user released on a different target, cancel!
        if (startEl !== e.target) return;

        var swipeThreshold = parseInt(getNearestAttribute(startEl, 'data-swipe-threshold', '20'), 10); // default 20px
        var swipeTimeout = parseInt(getNearestAttribute(startEl, 'data-swipe-timeout', '500'), 10);    // default 500ms
        var timeDiff = Date.now() - timeDown;
        var eventType = '';
        var changedTouches = e.changedTouches || e.touches || [];

        if (Math.abs(xDiff) > Math.abs(yDiff)) { // most significant
            if (Math.abs(xDiff) > swipeThreshold && timeDiff < swipeTimeout) {
                if (xDiff > 0) {
                    eventType = 'swiped-left';
                } else {
                    eventType = 'swiped-right';
                }
            }
        } else if (Math.abs(yDiff) > swipeThreshold && timeDiff < swipeTimeout) {
            if (yDiff > 0) {
                eventType = 'swiped-up';
            } else {
                eventType = 'swiped-down';
            }
        }

        if (eventType !== '') {

            var eventData = {
                dir: eventType.replace(/swiped-/, ''),
                xStart: parseInt(xDown, 10),
                xEnd: parseInt((changedTouches[0] || {}).clientX || -1, 10),
                yStart: parseInt(yDown, 10),
                yEnd: parseInt((changedTouches[0] || {}).clientY || -1, 10)
            };

            // fire `swiped` event event on the element that started the swipe
            startEl.dispatchEvent(new CustomEvent('swiped', {bubbles: true, cancelable: true, detail: eventData}));

            // fire `swiped-dir` event on the element that started the swipe
            startEl.dispatchEvent(new CustomEvent(eventType, {bubbles: true, cancelable: true, detail: eventData}));
        }

        // reset values
        xDown = null;
        yDown = null;
        timeDown = null;
    }

    /**
     * Records current location on touchstart event
     * @param {object} e - browser event object
     * @returns {void}
     */
    function handleTouchStart(e) {

        // if the element has data-swipe-ignore="true" we stop listening for swipe events
        if (e.target.getAttribute('data-swipe-ignore') === 'true') return;

        startEl = e.target;

        timeDown = Date.now();
        xDown = e.touches[0].clientX;
        yDown = e.touches[0].clientY;
        xDiff = 0;
        yDiff = 0;
    }

    /**
     * Records location diff in px on touchmove event
     * @param {object} e - browser event object
     * @returns {void}
     */
    function handleTouchMove(e) {

        if (!xDown || !yDown) return;

        var xUp = e.touches[0].clientX;
        var yUp = e.touches[0].clientY;

        xDiff = xDown - xUp;
        yDiff = yDown - yUp;
    }

    /**
     * Gets attribute off HTML element or nearest parent
     * @param {object} el - HTML element to retrieve attribute from
     * @param {string} attributeName - name of the attribute
     * @param {any} defaultValue - default value to return if no match found
     * @returns {any} attribute value or defaultValue
     */
    function getNearestAttribute(el, attributeName, defaultValue) {

        // walk up the dom tree looking for data-action and data-trigger
        while (el && el !== document.documentElement) {

            var attributeValue = el.getAttribute(attributeName);

            if (attributeValue) {
                return attributeValue;
            }

            el = el.parentNode;
        }

        return defaultValue;
    }

}(window, document));

EOD;

    }
}